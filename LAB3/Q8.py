#Write a function ‘mutate’ to compute all words generated by a single mutation on a
#given word. A mutation is defined as inserting a character, deleting a character,
#replacing a character, or swapping 2 consecutive characters in a string. For simplicity
#consider only letters from a to z.
def mutate(d):  # sourcery skip: aug-assign, while-to-for
    ret = [d]
    i = 0
    l = len(d)
    alp = map(chr, range(97, 123))

    while i < l:
        cop = d
        ret.append(cop[:i] + cop[i + 1:])
        if i < l - 2:
            ret.append(cop[:i] + cop[i + 1] + cop[i] + cop[i + 2:])
        elif i < l - 1:
            ret.append(cop[:i] + cop[i + 1] + cop[i])
        for x in alp:
            ret.append(cop[:i] + x + cop[i + 1:])
        for x in alp:
            ret.append(d + x)
            ret.append(x + d)
            ret.append(cop[:i] + x + cop[i:])
        i = i + 1
    return ret


print(mutate("sid"))
